version: '3.8'

networks:
  backend_network:
    external: false

services:
  products_service:
    build: .
    container_name: products_service
    environment:
      - DATABASE_URL=${PRODUCTS_SERVICE_DB_URL}
      - PRODUCTS_SERVICE_URL=${PRODUCTS_SERVICE_URL}
      - REVIEWS_SERVICE_URL=${REVIEWS_SERVICE_URL}
      - FLASK_ENV=testing
    ports:
      - "5001:5001"
    networks:
      - backend_network
    depends_on:
      products_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  reviews_service:
    image: "morbarda/reviews-service:testing"
    container_name: reviews_service
    environment:
      - DATABASE_URL=${REVIEWS_SERVICE_DB_URL}
      - PRODUCTS_SERVICE_URL=${PRODUCTS_SERVICE_URL}
      - REVIEWS_SERVICE_URL=${REVIEWS_SERVICE_URL}
      - FLASK_ENV=testing
    ports:
      - "5000:5000"
    networks:
      - backend_network
    depends_on:
      reviews_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # rabbit consmer server
  reviews_consumer:
      image: "morbarda/reviews-service:latest"
      container_name: reviews_consumer
      command: python -m app.run_consumer
      environment:
        - DATABASE_URL=${REVIEWS_SERVICE_DB_URL}
        - PRODUCTS_SERVICE_URL=${PRODUCTS_SERVICE_URL}
        - REVIEWS_SERVICE_URL=${REVIEWS_SERVICE_URL}
        - FLASK_ENV=testing
      networks:
        - backend_network
      depends_on:
        reviews_db:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy

  products_db:
    image: postgres:15
    container_name: products_test_db
    restart: "no"
    environment:
      POSTGRES_DB: products_test_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d products_test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  reviews_db:
    image: postgres:15
    container_name: reviews_test_db
    restart: "no"
    environment:
      POSTGRES_DB: reviews_test_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d reviews_test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  # rabbit server
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Connection
      - "15672:15672" # Management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  integration_tests:
    image: python:3.10
    working_dir: /tests
    volumes:
      - ./tests:/tests
      - ./requirements.txt:/requirements.txt
    networks:
      - backend_network
    depends_on:
      - products_service
      - reviews_service
      - products_db
      - reviews_db
      - rabbitmq
    environment:
      - PRODUCTS_SERVICE_URL=${PRODUCTS_SERVICE_URL}
      - REVIEWS_SERVICE_URL=${REVIEWS_SERVICE_URL}
      - FLASK_ENV=testing
    command: bash -c "pip install -r /requirements.txt && pytest /tests/integration_test.py -v"